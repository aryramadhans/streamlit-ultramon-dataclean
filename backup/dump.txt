# import numpy as np
# import plotly.graph_objects as go


# def display_data_cleaning_page(cleaning_function):
#     # File uploader
#     uploaded_files = st.file_uploader("Upload CSV files for cleaning the data", 
#                                     type="csv", 
#                                     accept_multiple_files=True)

#     # Initialize an empty DataFrame for merging
#     merged_cleaned_data = pd.DataFrame()
#     processed_files = set()
#     duplicates_found = []

#     # Process each file
#     if uploaded_files:
#         st.write(f"Total number of files submitted: {len(uploaded_files)}")
#         for uploaded_file in uploaded_files:
#             # Check for duplicates
#             if uploaded_file.name in processed_files:
#                 duplicates_found.append(uploaded_file.name)
#                 continue
                
#             processed_files.add(uploaded_file.name)

#             # Read and reset file pointer
#             content = io.BytesIO(uploaded_file.read())
#             content.seek(0)  # Reset pointer to start

#             # Clean data using the provided function
#             try:
#                 cleaned_data = cleaning_function(content)
#                 merged_cleaned_data = pd.concat([merged_cleaned_data, cleaned_data], ignore_index=True)
#             except Exception as e:
#                 st.error(f"Error processing {uploaded_file.name}: {str(e)}")
#                 continue

#         # Show duplicates warning
#         if duplicates_found:
#             st.warning(f"Ignored duplicate files: {', '.join(list(set(duplicates_found)))}")

#         if not merged_cleaned_data.empty:
#             st.write("Merged Cleaned Data:")
#             st.dataframe(merged_cleaned_data)

#             # Download button
#             csv = merged_cleaned_data.to_csv(index=False).encode('utf-8')
#             st.download_button(
#                 label="Download Merged Cleaned Data",
#                 data=csv,
#                 file_name="merged_cleaned_data.csv",
#                 mime="text/csv"
#             )
#         else:
#             st.warning("No valid data processed from uploaded files")



# def display_data_cleaning_page(cleaning_function):
#     # File uploader
#     uploaded_files = st.file_uploader("Upload CSV files for cleaning the data", 
#                                     type="csv", 
#                                     accept_multiple_files=True)

#     # Initialize variables
#     merged_cleaned_data = pd.DataFrame()
#     processed_files = set()
#     duplicates_found = []

#     # Process each file
#     if uploaded_files:
#         for uploaded_file in uploaded_files:
#             if uploaded_file.name in processed_files:
#                 duplicates_found.append(uploaded_file.name)
#                 continue
                
#             processed_files.add(uploaded_file.name)
            
#             with st.expander(f"File: {uploaded_file.name}", expanded=False):
#                 content = io.BytesIO(uploaded_file.read())
#                 content.seek(0)

#                 try:
#                     cleaned_data = cleaning_function(content)
#                     merged_cleaned_data = pd.concat([merged_cleaned_data, cleaned_data], ignore_index=True)
                    
#                     # Show raw data preview
#                     st.write("Raw Data Preview:")
#                     st.dataframe(cleaned_data.head())
                    
#                 except Exception as e:
#                     st.error(f"Error processing {uploaded_file.name}: {str(e)}")
#                     continue

#         # Show duplicates warning
#         if duplicates_found:
#             st.warning(f"Ignored duplicate files: {', '.join(list(set(duplicates_found)))}")

#         if not merged_cleaned_data.empty:
#             # Main data display
#             st.write("Merged Cleaned Data:")
#             st.dataframe(merged_cleaned_data)

#             # Visualization Section
#             st.markdown("---")
#             st.header("Data Visualization")
            
#             # Create columns for chart controls
#             col1, col2 = st.columns([1, 3])
            
#             with col1:
#                 # Chart type selector
#                 chart_type = st.selectbox("Choose Chart Type", 
#                                         ["Line", "Bar", "Scatter", "Histogram"])
                
#                 # Date column detection (if exists)
#                 date_columns = merged_cleaned_data.select_dtypes(include=['datetime']).columns.tolist()
#                 x_axis = st.selectbox("X-axis", merged_cleaned_data.columns, 
#                                     index=0 if not date_columns else date_columns.index(date_columns[0]))
                
#                 # Y-axis selector
#                 numeric_columns = merged_cleaned_data.select_dtypes(include=np.number).columns.tolist()
#                 y_axis = st.selectbox("Y-axis", numeric_columns, index=0 if numeric_columns else None)

#             with col2:
#                 # Generate plot using Plotly
#                 fig = go.Figure()
                
#                 if chart_type == "Line":
#                     if x_axis and y_axis:
#                         fig.add_trace(go.Scatter(
#                             x=merged_cleaned_data[x_axis],
#                             y=merged_cleaned_data[y_axis],
#                             mode='lines',
#                             name=f'{y_axis} over {x_axis}'
#                         ))
#                 elif chart_type == "Bar":
#                     fig.add_trace(go.Bar(
#                         x=merged_cleaned_data[x_axis],
#                         y=merged_cleaned_data[y_axis],
#                         name=f'{y_axis} by {x_axis}'
#                     ))
#                 elif chart_type == "Scatter":
#                     fig.add_trace(go.Scatter(
#                         x=merged_cleaned_data[x_axis],
#                         y=merged_cleaned_data[y_axis],
#                         mode='markers',
#                         name=f'{y_axis} vs {x_axis}'
#                     ))
#                 elif chart_type == "Histogram":
#                     fig.add_trace(go.Histogram(
#                         x=merged_cleaned_data[y_axis],
#                         name=f'Distribution of {y_axis}'
#                     ))

#                 # Update layout
#                 fig.update_layout(
#                     title=f"{chart_type} Chart of {y_axis}" + (f" vs {x_axis}" if chart_type != "Histogram" else ""),
#                     xaxis_title=x_axis if chart_type != "Histogram" else y_axis,
#                     yaxis_title=y_axis if chart_type != "Histogram" else "Count",
#                     hovermode="x unified"
#                 )
                
#                 st.plotly_chart(fig, use_container_width=True)

#             # Download buttons in separate columns
#             st.markdown("---")
#             st.header("Data Export")
#             col_csv, col_excel = st.columns(2)
            
#             with col_csv:
#                 csv = merged_cleaned_data.to_csv(index=False).encode('utf-8')
#                 st.download_button(
#                     label="Download as CSV",
#                     data=csv,
#                     file_name="merged_cleaned_data.csv",
#                     mime="text/csv"
#                 )
            
#             with col_excel:
#                 excel_buffer = io.BytesIO()
#                 with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
#                     merged_cleaned_data.to_excel(writer, index=False, sheet_name='CleanedData')
#                 excel_buffer.seek(0)
                
#                 st.download_button(
#                     label="Download as Excel",
#                     data=excel_buffer,
#                     file_name="merged_cleaned_data.xlsx",
#                     mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#                 )

#         else:
#             st.warning("No valid data processed from uploaded files")